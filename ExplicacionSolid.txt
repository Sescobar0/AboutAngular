🌟 ¿Qué es Angular?
Angular es un framework para construir aplicaciones web dinámicas usando TypeScript. 
Ofrece una arquitectura basada en componentes, inyección de dependencias, servicios y mucho más.

🔧 Tecnologías clave en Angular

Angular es un framework completo, y aunque su núcleo es TypeScript, 
trabaja con un conjunto de tecnologías para ofrecer una solución robusta para aplicaciones web modernas.

1. TypeScript
🧠 Angular está escrito en TypeScript.
Aporta seguridad, autocompletado, y una arquitectura orientada a objetos más fuerte.
✅ Reemplaza a JavaScript tradicional en el desarrollo de Angular.

2. HTML y CSS
📄 Angular usa HTML para definir la estructura de las vistas (templates).
🎨 Puedes usar CSS, SCSS (Sass), o incluso Tailwind para el estilo de componentes.

3. RxJS (Reactive Extensions for JavaScript)
🔄 Biblioteca para trabajar con programación reactiva y asincronía.
Angular usa RxJS para:
- Observables (por ejemplo, en peticiones HTTP)
- Event handling
- Reactive forms

4. Zone.js
🌀 Angular lo usa internamente para detectar cambios (Change Detection).

5. Angular CLI
💻 Herramienta de línea de comandos para crear, desarrollar y construir proyectos Angular.
Facilita:
- Generar componentes, servicios, módulos
- Servir la app (ng serve)
- Compilar y testear


🧠 Explicación de cada uno de los conceptos de SOLID

S – Single Responsibility Principle (SRP)
“Una clase debe tener una sola razón para cambiar.”
📌 Cada clase o módulo debe encargarse de una sola cosa.
🚫 Mal:
Una clase que gestiona tareas, las guarda en archivo y también las pinta en pantalla.


O – Open/Closed Principle (OCP)
“El código debe estar abierto a extensión, pero cerrado a modificación.”
📌 Deberías poder agregar nuevas funcionalidades sin tener que cambiar el código existente.
🚫 Mal:
Editar un switch gigante cada vez que hay una nueva funcionalidad.


L – Liskov Substitution Principle (LSP)
“Una subclase debe poder sustituir a su clase base sin romper la aplicación.”
📌 Si tenés una clase base, cualquier clase hija debe funcionar igual de bien si se usa en su lugar.


I – Interface Segregation Principle (ISP)
“Es mejor tener muchas interfaces pequeñas y específicas que una sola grande.”
📌 No forzar a las clases a implementar métodos que no necesitan.
🚫 Mal:
Una sola interfaz con 10 métodos que no todas las clases usan.


D – Dependency Inversion Principle (DIP)
“Las clases deben depender de abstracciones, no de implementaciones concretas.”
📌 Tu clase debe depender de interfaces o clases abstractas, no directamente de otras clases.



🎯 ¿Por qué usar SOLID?
✨ Código más limpio y organizado
🔁 Fácil de mantener y extender
🧪 Más fácil de testear
🔄 Menos errores al hacer cambios